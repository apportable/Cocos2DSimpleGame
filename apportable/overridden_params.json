
{
  // Dictionary of global configuration parameters.
  // These parameters are not taken from the xcode project,
  // so they need to be supplied by the user.
  "config": {

    // The name of the application.
    // "APPLICATION_NAME": "",

    // The full name of the application, if different from above.
    // "APPLICATION_FULL_NAME": "",

    // The unique identifier for the application.
    // Normally this is in reverse DNS notation, e.g.,
    // "com.apportable.Spin"
    // "APPLICATION_IDENTIFIER": "",

    // Short version name for the app, e.g., "1.0"
    // "SHORT_VERSION": "",

    // Optional long version name for the app.
    // "LONG_VERSION": "",

    // Major version number for the app, e.g., 1
    //"MAJOR_VERSION": 1,

    // Minor version number for the app, e.g., 0
    // or 0.1
    //"MINOR_VERSION": 0,

    // Short description of the app.
    //"APPLICATION_DESCRIPTION": "",

    // One of "iPhone", "iPhonePortrait", "iPad", or "Native".
    // Determines the screen bounds returned by [UIScreen bounds].
    //"APPLICATION_SIZE": "iPhone",

    // One of "stretch" or "scale".  Determines how the APPLICATION_SIZE
    // is adjusted to match the native screen bounds.  Defaults to
    // "stretch"
    //"APPLICATION_SIZE_ADJUSTMENT": "stretch",

    // One of "match_height", "match_width", "match_scale", or "match_none".
    // Defaults to "match_none".  This constrains the scale factor
    // on the device.  "match_height" will cause [UIScreen adjustedBounds]
    // to return a height that matches the APPLICATION_SIZE height, and
    // a width that uniformly scales the device's native width by the same
    // scale factor necessary to match the height.  This means that
    // [UIScreen adjustedBounds] will return a uniformly scaled rectangle
    // for all devices, but the app can depend on having a known height.
    // "match_width" does the same, but bases the scale on matching the
    // native width to the APPLICATION_SIZE width.
    // "match_scale" will always return 1 or 2 for [UIScreen scale],
    // depending on whether the native resolution is sufficiently larger
    // than the APPLICATION_SIZE resolution.
    // "match_none" allows APPLICATION_SIZE_ADJUSTMENT to work as described
    // above.
    //"APPLICATION_CONTENT_SCALE": "match_none",

    // A list of features needed on the target platform.
    // Common features include:
    //   "access_network_state"
    //   "access_wifi_state"
    //   "billing"
    //   "get_accounts"
    //   "internet"
    //   "large_heap"
    //   "multitouch"
    //   "multitouch_distinct"
    //   "opengles2"
    //   "touch_filter_move"
    //   "write_external_storage"
    //"FEATURES": [],

    // Typically a reverse DNS identifier for the application
    // developer, e.g., "com.apportable".  It should match the
    // prefix of APPLICATION_IDENTIFIER above.
    //"VENDOR_PREFIX": "",

    // Preferred way of handling URLs in the code.
    // Leave it null for most cases.
    //"URL_SCHEME": null,

    // Default format for textures used in the app.
    // Any pvr textures encountered in the assets list will
    // have their extension changed to this value, so the
    // corresponding file needs to exist.
    // For example, setting this to "png" will make an app
    // that can run on any device (assuming your app includes
    // a png decoder path for all textures), but you will need
    // png versions of all of your pvr textures in the same
    // locations as the pvrs.
    // Defaults to "pvr".
    // "TARGET_TEXTURE_FMT": "pvr",

    // ID for reporting crashdumps for your app.
    // Supplied by Apportable.
    //"CRASHDUMP_APP_ID": "",

    // Secret key for encrypting and decrypting crashdumps
    // for your app.  Supplied by Apportable.
    //"CRASHDUMP_SECRET": "",

    // Key to receive remote notifications on the device.
    //"REMOTE_NOTIFICATION_KEY": "",

    // The method for adjusting the splash screen (Default.png)
    // to fit the native device resolution.  Options are:
    //   "aspect_fill"
    //   "aspect_fit"
    //   "letterbox" (the default)
    //   "native"
    //   "stretch"
    //"SPLASH_SCREEN_TYPE": "letterbox",

    // Path to the image to use for the app's icon.
    // Usually something like "./Icon.png".
    // "ICON": "",

    // A regular expression to determine which assets
    // should be compressed when building the final app.
    // By default, text assets are not compressed.  Use
    // this to compress certain text assets.  For example,
    // ".*.plist$" will cause all files ending in ".plist"
    // to be compressed.
    //"COMPRESSED_ASSETS_PATTERN": ""

    // Mixpanel token for integrating Mixpanel analytics into the app.  Supplied by Apportable.
    //"MPMETRICS_API_KEY": ""
  },

  // Sometimes header include path ordering matters.  If so, put the ordering constraints into this
  // array.  For example, if "./foo" has to come before "./bar", you would put:
  // ["./foo", "./bar"]
  // Note that "./some_other_include_path" doesn't appear in the list, since its order doesn't matter.
  // You can also specify "*", which matches everything not already constrained.  This lets you put
  // particular paths at the beginning or end of the list.  For example, ["./foo", "*", "./bar"].
  "header_ordering_constraints": [],

  // Edit this section to add and replace files and parameters to the generated settings for this project.
  // If the generated settings for a particular file are incorrect, simply add it here with the settings
  // you need and the final build parameters will only included the version specified here.
  "add_params": 
  {
    // A list of pch files to -include.
    // PCH files can be either a string, e.g., "./MyApp-Prefix.pch",
    // or a dictionary specifying the pch and the environment where
    // it should be used, e.g.,
    // {"pch": "./prefix-android.pch", "env": {"TARGET_OS": "android"}}
    "pchs": [],
    // A list of header search paths
    "header_paths": [],
    // A list of global compile flags for the project.
    // Flags can be either a string, e.g. "-Werror-shadow",
    // or a dictionary specifying the flag and the environment
    // that it should be used in, e.g.,
    // {"flag": "-fstack-protector", "env": {"TARGET_OS": "android"}}
    "flags": [],
    // A dictionary of global compiler definitions for the project.
    // Defines can be a simple key-value pair, e.g., "DEBUG": 1,
    // or the value can be a dictionary specifying the value and the
    // environment that it should be used in, e.g.,
    // "SOME_DEFINE": {"value": ""yep its building on android"", "env": {"TARGET_OS": "android"}}
    "defines": {},
    // A list of dependencies.  Typically these correspond to
    // frameworks in the xcode project.  Dependencies can be either
    // a string, e.g., "UIKit", or a dictionary specifying the dependency
    // and the environment that it should be used in, e.g.,
    // {"dep": "SomeOtherSystemLib", "env": {"TARGET_OS" : "android"}}
    "deps": [],
    // A list of .m, .mm, .c, .cc, and .cpp files to build.
    // Source files can be a string, e.g. "./main.c",
    // a list consisting of the file path and any special compile flags for that file,
    // e.g., ["./AppDelegate.m", "-fobjc-arc", "-Werror-shadow"], or a
    // dictionary specifying the file, any special flags, any defines, and the environment
    // where it should be compiled, e.g.,
    // {"source": "./PngImageLoader.m", "flags": ["-fstack-protector"], "defines": {"PNG": 1}, "env": {"TARGET_TEXTURE_FMT": "png"}}
    "sources": [],
    // A list of assets to package with the application.
    // Assets can be either a string, e.g., "./Info.plist",
    // a dictionary specifying the asset, the target path it should be written to
    // in the app, and the environment it should be included with, e.g.,
    // {"asset": "./Resources/cube_texture.pvr.ccz", "target_path": "Bundled Resources/", "env": {"TARGET_TEXTURE_FMT": "pvr"}}
    // or a dictionary like above, but instead specifying the full target file name
    // for the asset, e.g.,
    // {"asset": "./Resources/cube_texture.pvr.ccz", "target_file": "Bundled Resources/cube_texture.pvr.gz", "env": {"TARGET_TEXTURE_FMT": "pvr"}}
    // You can specify all the contents of a directory with:
    // "./path/to/dir/*"
    "assets": [],
    // A list of Info.plist files.  The first one in the list will be the one we consider the main Info.plist.
    "infoplists": [],
    // A list of xcdatamodeld files that will need mom files in the final resource list.
    // MOM files can be either a string, e.g., "./datamodels/my_data.xcdatamodeld",
    // or a dictionary specifying the mom and the environment where it should
    // be used, e.g.,
    // {"mom": "./android-mom.xcdatamodeld", "env": {"TARGET_OS": "android"}}
    "moms": []
  }
  ,

  // Edit this section to remove files and parameters from the generated #{$build_params_file} for this project.
  // For this section, only specify the file name as a string in the cases where you could normally
  // also specify an array or a dictionary.  To override the generated settings for a particular
  // file, simply add it to the "add_params" list above with the settings you want.
  "remove_params": 
  {
    // A list of pch files to -include.
    // PCH files can be either a string, e.g., "./MyApp-Prefix.pch",
    // or a dictionary specifying the pch and the environment where
    // it should be used, e.g.,
    // {"pch": "./prefix-android.pch", "env": {"TARGET_OS": "android"}}
    "pchs": [],
    // A list of header search paths
    "header_paths": [],
    // A list of global compile flags for the project.
    // Flags can be either a string, e.g. "-Werror-shadow",
    // or a dictionary specifying the flag and the environment
    // that it should be used in, e.g.,
    // {"flag": "-fstack-protector", "env": {"TARGET_OS": "android"}}
    "flags": [],
    // A dictionary of global compiler definitions for the project.
    // Defines can be a simple key-value pair, e.g., "DEBUG": 1,
    // or the value can be a dictionary specifying the value and the
    // environment that it should be used in, e.g.,
    // "SOME_DEFINE": {"value": ""yep its building on android"", "env": {"TARGET_OS": "android"}}
    "defines": {},
    // A list of dependencies.  Typically these correspond to
    // frameworks in the xcode project.  Dependencies can be either
    // a string, e.g., "UIKit", or a dictionary specifying the dependency
    // and the environment that it should be used in, e.g.,
    // {"dep": "SomeOtherSystemLib", "env": {"TARGET_OS" : "android"}}
    "deps": [],
    // A list of .m, .mm, .c, .cc, and .cpp files to build.
    // Source files can be a string, e.g. "./main.c",
    // a list consisting of the file path and any special compile flags for that file,
    // e.g., ["./AppDelegate.m", "-fobjc-arc", "-Werror-shadow"], or a
    // dictionary specifying the file, any special flags, any defines, and the environment
    // where it should be compiled, e.g.,
    // {"source": "./PngImageLoader.m", "flags": ["-fstack-protector"], "defines": {"PNG": 1}, "env": {"TARGET_TEXTURE_FMT": "png"}}
    "sources": [],
    // A list of assets to package with the application.
    // Assets can be either a string, e.g., "./Info.plist",
    // a dictionary specifying the asset, the target path it should be written to
    // in the app, and the environment it should be included with, e.g.,
    // {"asset": "./Resources/cube_texture.pvr.ccz", "target_path": "Bundled Resources/", "env": {"TARGET_TEXTURE_FMT": "pvr"}}
    // or a dictionary like above, but instead specifying the full target file name
    // for the asset, e.g.,
    // {"asset": "./Resources/cube_texture.pvr.ccz", "target_file": "Bundled Resources/cube_texture.pvr.gz", "env": {"TARGET_TEXTURE_FMT": "pvr"}}
    // You can specify all the contents of a directory with:
    // "./path/to/dir/*"
    "assets": [],
    // A list of Info.plist files.  The first one in the list will be the one we consider the main Info.plist.
    "infoplists": [],
    // A list of xcdatamodeld files that will need mom files in the final resource list.
    // MOM files can be either a string, e.g., "./datamodels/my_data.xcdatamodeld",
    // or a dictionary specifying the mom and the environment where it should
    // be used, e.g.,
    // {"mom": "./android-mom.xcdatamodeld", "env": {"TARGET_OS": "android"}}
    "moms": []
  }
  
}
